- hosts: localhost
  gather_facts: no
  vars_files:
    - variables/vars.yml
    - variables/encrypt-iam-account.yml
  tasks:
    - name: provision CentOS VM (EC2) *****
      ec2:
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}" 
        ec2_region: "{{ AWS_REGION }}"
        instance_type: "{{ INSTANCE_TYPE }}"
        keypair: "{{ KEYPAIR }}"
        image: "{{ IMAGE }}"
        assign_public_ip: yes
        vpc_subnet_id: "{{ VPC_SUBNET_ID }}"
        group_id: "{{ GROUP_ID }}"
        wait: true
        exact_count: "{{ EXACT_COUNT }}"    
        count_tag: 
          Name: DemoA
        instance_tags:
          Name: "{{ INSTANCE_TAGS }}"
      register: ec2
    - debug:
        var: ec2

    - name: Create volume *****
      ec2_vol:
        instance: "{{ item.id }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}" 
        name: volume for "{{ item.id }}"
        region: "{{ AWS_REGION }}"
        device_name: "{{ DEVICE_NAME }}"
        volume_size: "{{ VOLUME_SIZE }}"
        volume_type: "{{ VOLUME_TYPE }}"
        encrypted: true
        delete_on_termination: true
      loop: "{{ ec2.instances }}"
      register: ec2_vol
    - debug:
        var: ec2_vol


    - name: Add hosts to inventory  *****
      add_host:
        hostname: '{{ item.public_ip }}'
        groupname: demogroup  # after this section is run, then we have the IPs in "demogroup"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no" # we attach a variable to "demogroup", We don't want to confirm the key validation
        ansible_ssh_private_key_file: keypair-for-ansible.pem
      loop: '{{ ec2.instances }}'
    
      
- hosts: demogroup
  gather_facts: no  # if this is "yes" , then a SSH will no be waiting for long.
  remote_user: centos
  tasks:
    - name: wait for SSH *****
      wait_for_connection:
        delay: 2
        timeout: 200

    - ec2_metadata_facts:   # ansible fetches EC2 facts from metadata for other variables.

    - name: debug *** ansible_ec2_local_ipv4 ***
      debug: var=ansible_ec2_local_ipv4

    - name: debug *** ansible_ec2_public_ipv4 ***
      debug: var=ansible_ec2_public_ipv4

    - name: debug *** ansible_ec2_public_hostname ***
      debug: var=ansible_ec2_public_hostname


    - name: Mount volume (EBS) to VM (EC2)  *****
      command: "{{ item }}"
      with_items:
        - file -s /dev/xvdb
        - mkfs -t ext4 /dev/xvdb
        - mkdir /newStorage
        - mount /dev/xvdb /newStorage/
      become: true
      register: mycmd
    - debug:
        var: mycmd


    - name: install docker *****
      command: "{{ item }}"
      with_items:
        - hostnamectl
        - yum update -y
        - dnf install python3 -y
        - dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo  # enable Docker CE repository
        - dnf repolist -v # verify repository
        - dnf list docker-ce # see list
        - dnf install docker-ce docker-ce-cli containerd.io -y  # install Docker 
        # - dnf install docker-ce --nobest -y
        - systemctl start docker
        - systemctl enable docker
        - dnf install curl -y  # This will install Docker Compose
        - curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        - chmod +x /usr/local/bin/docker-compose
      become: true
      register: mycmd
    - debug:
        var: mycmd



    - name: check if Docker is installed
      command: systemctl status docker
      register: docker_check
      ignore_errors: yes
      become: true
    - debug:
        var: docker_check

    - name: check the volumes 
      command: df -h
      register: check
    - debug:
        var: check



    - name: install pexpect ***** # if we want to execute linux command, we need to install PEXPECT
      pip:
        name: pexpect
      become: yes


  ####################################################################
  #                                                                  #
  #    Protect the Docker daemon socket                              #
  #                                                                  #
  #    According to https://docs.docker.com/engine/security/https/   #
  #                                                                  # 
  ####################################################################

    - name: generate the key, RSA AES256 *******
      expect:
        command: openssl genrsa -aes256 -out ca-key.pem 4096
        responses:
          'Enter': "12345"
          'Verifying': "12345"
      no_log: false # don't want to show passwords in logs
      register: mycmd
    - debug:
        var: mycmd

    - name: generate the key, x509 *******
      expect:
        command: openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem
        responses:
          'Enter pass phrase for ca-key.pem': "12345"
          'Country Name': "th"
          'State or Province Name': "Bangkok"
          'Locality Name': "Sukhumwit"
          'Organization Name': "Kixxxx"
          'Organizational Unit Name': "DevTeam"
          'Common Name': "{{ ansible_ec2_public_hostname }}"
          'Email Address': "sample@kixxxx.com"
      no_log: false
      register: mycmd
    - debug:
        var: mycmd

    - name: gen RSA (1) *****
      command: openssl genrsa -out server-key.pem 4096
      become: true
      register: mycmd
    - debug:
        var: mycmd 

    - name: gen RSA (2) *****
      command: openssl req -subj "/CN={{ ansible_ec2_public_hostname }}" -sha256 -new -key server-key.pem -out server.csr
      become: true
      register: mycmd
    - debug:
        var: mycmd 

    - name: write extfile.cnf  (1) ***
      shell: echo "subjectAltName = DNS:{{ ansible_ec2_public_hostname }},IP:{{ ansible_ec2_public_ipv4 }},IP:{{ ansible_ec2_local_ipv4 }}" > extfile.cnf
      #become: true
      args:
        creates: "extfile.cnf"
      register: mycmd
    - debug:
        var: mycmd 

    - name: write extfile.cnf  (2) ***
      shell: echo "extendedKeyUsage = serverAuth" > extfile.cnf
      #become: true
      register: mycmd
    - debug:
        var: mycmd 


    - name: generate the signed certificate *******
      expect:
        command: openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf
        responses:
          'Enter': "12345"
      no_log: false # don't want to show passwords in logs
      register: mycmd
    - debug:
        var: mycmd

    - name: gen RSA  *****
      command: openssl genrsa -out key.pem 4096
      register: mycmd
    - debug:
        var: mycmd 
    
    - name: create client.csr *****
      command: openssl req -subj '/CN=client' -new -key key.pem -out client.csr
      register: mycmd
    - debug:
        var: mycmd 

    - name: write extfile.cnf  (2) ***
      shell: echo "extendedKeyUsage = clientAuth" > extfile-client.cnf
      register: mycmd
    - debug:
        var: mycmd 

# Now, generate the signed certificate:

    - name: generate the signed certificate *******
      expect:
        command: openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf
        responses:
          'Enter': "12345"
      no_log: false
      register: mycmd
    - debug:
        var: mycmd


    - name: chmod *****
      command: "{{ item }}"
      with_items:
        - rm -v client.csr server.csr extfile.cnf extfile-client.cnf
        - chmod -v 0400 ca-key.pem key.pem server-key.pem
        - chmod -v 0444 ca.pem server-cert.pem cert.pem
        # - systemctl stop docker
        # - rm -rf /var/lib/docker
        # - systemctl start docker
        - ps axf | grep docker | grep -v grep | awk '{print "kill -9 " $1}' | sudo sh
        - rm /var/run/docker.pid
        # - dockerd --tlsverify --tlscacert=ca.pem --tlscert=server-cert.pem --tlskey=server-key.pem -H=0.0.0.0:2376  # make the Docker daemon only accept connections from clients providing a certificate trusted by your CA:
      become: true
      register: mycmd
    - debug:
        var: mycmd

    # - name: start demond *****
    #   command: dockerd --tlsverify --tlscacert=ca.pem --tlscert=server-cert.pem --tlskey=server-key.pem -H=0.0.0.0:2376  # make the Docker daemon only accept connections from clients providing a certificate trusted by your CA:
    #   become: true
    #   register: mycmd
    # - debug:
    #     var: mycmd 

