# ansible-playbook playbook.yml --ask-vault-pass

- hosts: localhost
  gather_facts: no
  vars_files:
    - variables/vars.yml
    - variables/encrypt-iam-account.yml
  vars:
    instance_names:
      - eggroll1
      - eggroll2
  tasks:
    - name: provision CentOS VM (EC2) *****
      ec2:
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}" 
        ec2_region: "{{ AWS_REGION }}"
        instance_type: "{{ INSTANCE_TYPE }}"
        keypair: "{{ KEYPAIR }}"
        image: "{{ IMAGE }}"
        assign_public_ip: yes
        vpc_subnet_id: "{{ VPC_SUBNET_ID }}"
        group_id: "{{ GROUP_ID }}"
        wait: true

        exact_count: "{{ EXACT_COUNT }}"    
        count_tag: 
          Name: Demo
        instance_tags:
          Name: "{{ INSTANCE_TAGS }}"    

      register: ec2
    - debug:
        var: ec2


    # - name: Create volume *****
    #   ec2_vol:
    #     instance: "{{ item.id }}"
    #     aws_access_key: "{{ ec2_access_key }}"
    #     aws_secret_key: "{{ ec2_secret_key }}" 
    #     name: volume for "{{ item.id }}"
    #     region: "{{ AWS_REGION }}"
    #     device_name: "{{ DEVICE_NAME }}"
    #     volume_size: "{{ VOLUME_SIZE }}"
    #     volume_type: "{{ VOLUME_TYPE }}"
    #     encrypted: true
    #     delete_on_termination: true
    #   loop: "{{ ec2.instances }}"
    #   register: ec2_vol
    # - debug:
    #     var: ec2_vol

    - name: Add hosts to inventory  *****
      add_host:
        hostname: '{{ item.public_ip }}'
        groupname: demogroup  # after this section is run, then we have the IPs in "demogroup"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no" # we attach a variable to "demogroup", We don't want to confirm the key validation
        ansible_ssh_private_key_file: keypair-for-ansible.pem
      loop: '{{ ec2.instances }}'


   
   
- hosts: demogroup
  gather_facts: no  # if this is "yes" , then a SSH will no be waiting for long.
  remote_user: centos
  tasks:
    - name: wait for SSH *****
      wait_for_connection:
        delay: 2
        timeout: 300

    - ec2_metadata_facts:   # Ansible fetches EC2-facts from metadata for futher variables.



    # - name: Mount volume (EBS) to VM (EC2)  *****
    #   command: "{{ item }}"
    #   with_items:
    #     - file -s /dev/xvdb
    #     - mkfs -t ext4 /dev/xvdb
    #     - mkdir /newStorage
    #     - mount /dev/xvdb /newStorage/
    #   become: true
  
    

    - name: Update OS and downoad OpenSSL *****
      command: "{{ item }}"
      with_items:
        - yum clean all  
        - yum install dnf -y
        - dnf update -y
        - dnf install openssl -y
      become: true


    - name: install Python and Docker *****
      command: "{{ item }}"
      with_items:
        - yum install python2 -y
        - yum install python3 -y
        - yum install epel-release -y
        # - yum install python-pip -y   #for centOS 7
        - pip2 install pexpect
        - pip3 install pexpect

        # to install Docker
        - yum install -y yum-utils
        - yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo  # enable Docker CE repository
        - yum install docker-ce docker-ce-cli containerd.io -y #this is version 19.03.13
        - dnf install wget -y
        - wget https://download.docker.com/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker.repo # for Docker Swarm
      become: true

    
    - name: install pexpect ***** # if we want to execute linux command, we need to install PEXPECT
      pip:
        name: pexpect
      become: yes


      ####################################################################
      #                                                                  #
      #    Protect the Docker daemon socket to be secure                 #
      #                                                                  #
      #    According to https://docs.docker.com/engine/security/https/   #
      #                                                                  # 
      ####################################################################

    - name: Generate the Private Key *******
      expect:
        command: openssl genrsa -aes256 -out ca-key.pem 4096
        responses:
          'Enter': "12345"
          'Verifying': "12345"
      no_log: false # don't want to show passwords in logs
  

    - name: Generate the Public Key *******
      expect:
        command: openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem
        responses:
          'Enter pass phrase for ca-key.pem': "12345"
          'Country Name': "th"
          'State or Province Name': "Bangkok"
          'Locality Name': "Sukhumwit"
          'Organization Name': "Kixxxx"
          'Organizational Unit Name': "DevTeam"
          'Common Name': "{{ ansible_ec2_public_hostname }}"
          'Email Address': "sample@kixxxx.com"
      no_log: false

    
    - name: Create a server key and certificate signing request (CSR) *****
      command: "{{ item }}"
      with_items:
        - openssl genrsa -out server-key.pem 4096
        - openssl req -subj "/CN={{ ansible_ec2_public_hostname }}" -sha256 -new -key server-key.pem -out server.csr
      become: true


    - name: Sign the public key with our CA  (1) *** #  to allow connections 
      shell: echo "subjectAltName = DNS:{{ ansible_ec2_public_hostname }},IP:{{ ansible_ec2_public_ipv4 }},IP:{{ ansible_ec2_local_ipv4 }}" > extfile.cnf
      args:
        creates: "extfile.cnf"
  
    - name: Sign the public key with our CA  (2) *** # Set the Docker daemon keyâ€™s extended usage attributes to be used only for server authentication:
      shell: echo "extendedKeyUsage = serverAuth" > extfile.cnf
 


    - name: Generate the signed certificate *******
      expect:
        command: openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf
        responses:
          'Enter': "12345"
      no_log: false # don't want to show passwords in logs


    - name: Create a client key and certificate signing request (For client authentication) *****
      command: "{{ item }}"
      with_items:
        - openssl genrsa -out key.pem 4096
        - openssl req -subj '/CN=client' -new -key key.pem -out client.csr
      become: true


    - name: Create a new extensions config file (To make the key suitable for client authentication) ***
      shell: echo "extendedKeyUsage = clientAuth" > extfile-client.cnf


    - name: Generate the signed certificate *******
      expect:
        command: openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf
        responses:
          'Enter': "12345"
      no_log: false
    

    - name: Remove some file and change permission to others ***** #After generating cert.pem and server-cert.pem , we can safely remove the two certificate signing requests and extensions config files
      command: "{{ item }}"
      with_items:
        - rm -v client.csr server.csr extfile.cnf extfile-client.cnf
        - chmod -v 0400 ca-key.pem key.pem server-key.pem
        - chmod -v 0444 ca.pem server-cert.pem cert.pem
      become: true
  

    - name: Secured Docker by default ***** # according to https://unix.stackexchange.com/questions/271514/setting-persistent-environment-variable-in-centos-7-issue
      shell: |
        sudo mkdir -pv ~/.docker
        sudo cp -v ca.pem ~/.docker
        sudo cp -v cert.pem ~/.docker
        sudo cp -v key.pem ~/.docker
        echo 'export DOCKER_HOST="tcp://{{ ansible_ec2_public_hostname }}:2376"' >> $HOME/.bashrc
        echo 'export DOCKER_TLS_VERIFY="1"' >> $HOME/.bashrc


    - name: configure Docker to start after reboot # https://www.digitalocean.com/community/questions/how-to-fix-docker-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket
      shell: |
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo chmod 666 /var/run/docker.sock 
      register: task_result

        # sudo usermod -aG docker centos
        # newgrp - docker

    - name: Reboot immediately if there was a change.
      shell: "sudo reboot"
      async: 1
      poll: 0
      when: task_result is changed

    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        connect_timeout: 20
        delay: 2
        timeout: 300
      when: task_result is changed


      ####################################################################
      #                                                                  #
      #    Swarm configuration                                           #
      #                                                                  # 
      ####################################################################
    #https://medium.com/@Alibaba_Cloud/how-to-install-and-configure-docker-swarm-mode-on-centos-7-c0b32f0fbc82
    
    #docker swarm init --advertise-addr {{ ansible_ec2_local_ipv4 }}

#(1 & 2)  #https://www.tecmint.com/install-configure-firewalld-in-centos-ubuntu/
# rpm -qa firewalld    
# sudo dnf install firewalld -y
# sudo systemctl start firewalld
# sudo systemctl enable firewalld

#(1&2)
# sudo firewall-cmd --permanent --add-port=2376/tcp
# sudo firewall-cmd --permanent --add-port=2377/tcp
# sudo firewall-cmd --permanent --add-port=7946/tcp
# sudo firewall-cmd --permanent --add-port=80/tcp
# sudo firewall-cmd --permanent --add-port=7946/udp
# sudo firewall-cmd --permanent --add-port=4789/udp
# sudo firewall-cmd --reload
# sudo systemctl restart docker

    - name: Configure Firewall for Docker Swarm
      shell: |
        rpm -qa firewalld
        sudo dnf install firewalld -y
        sudo systemctl start firewalld
        sudo systemctl enable firewalld
        sudo firewall-cmd --permanent --add-port=2376/tcp
        sudo firewall-cmd --permanent --add-port=2377/tcp
        sudo firewall-cmd --permanent --add-port=7946/tcp
        sudo firewall-cmd --permanent --add-port=80/tcp
        sudo firewall-cmd --permanent --add-port=7946/udp
        sudo firewall-cmd --permanent --add-port=4789/udp
        sudo firewall-cmd --reload
        sudo systemctl restart docker
        

#sudo echo '1.2.3.4 testtest' >> /etc/hosts

#(1 & 2)
# sudo vi /etc/hosts
# \\private\\
# 172.31.7.145  managernode
# 172.31.7.197  workernode1

#(1)
# sudo hostnamectl set-hostname managernode

#(2)
#sudo hostnamectl set-hostname workernode1


#(1)
# sudo docker swarm init --advertise-addr \\private\\54.200.91.58
# sudo docker swarm init --advertise-addr 172.31.7.145

#(2)
#docker swarm join --token SWMTKN-1-xxxxxxxxx- \\private\\192.168.0.102:2377





      ####################################################################
      #                                                                  #
      #    Check statuses                                                #
      #                                                                  # 
      ####################################################################

    - name: Check status *** ansible_ec2_local_ipv4 ***
      debug: var=ansible_ec2_local_ipv4

    - name: Check status *** ansible_ec2_public_ipv4 ***
      debug: var=ansible_ec2_public_ipv4

    - name: Check status *** ansible_ec2_public_hostname ***
      debug: var=ansible_ec2_public_hostname


    - name: Check status - Docker is being run ?
      command: systemctl status docker
      register: docker_check
      ignore_errors: yes
      become: true
    - debug:
        var: docker_check

    - name: Check status - The size of volumes
      command: df -h
      register: check
    - debug:
        var: check

    - name: Check status - OS version
      command: hostnamectl
      register: check
    - debug:
        var: check


   
